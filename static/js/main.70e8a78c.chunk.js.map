{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","myStyle","setMyStyle","btnText","setBtnText","className","style","id","type","onClick","border","Navbar","props","mode","to","title","Link","aboutText","placeholder","toggleMode","role","for","TextForm","text","setText","heading","onChange","event","console","log","target","value","rows","newText","toUpperCase","showAlert","toLowerCase","split","length","Alert","alert","word","lower","charAt","slice","capitalize","msg","class","defaultProps","App","setMode","setAlert","message","setTimeout","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"uNAEe,SAASA,IAEpB,MAA8BC,mBAAS,CACnCC,MAAO,QACPC,gBAAiB,UAFrB,mBAAOC,EAAP,KAAgBC,EAAhB,KAKA,EAA8BJ,mBAAS,oBAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAoBA,OACI,sBAAKC,UAAU,YAAYC,MAAOL,EAAlC,UACI,oBAAII,UAAU,OAAd,uBACA,sBAAKA,UAAU,YAAYE,GAAG,mBAAmBD,MAAOL,EAAxD,UACI,sBAAKI,UAAU,iBAAf,UACI,oBAAIA,UAAU,mBAAmBE,GAAG,aAApC,SACI,wBAAQF,UAAU,mBAAmBC,MAAOL,EAASO,KAAK,SAAS,iBAAe,WAAW,iBAAe,eAAe,gBAAc,OAAO,gBAAc,cAA9J,iCAIJ,qBAAKD,GAAG,cAAcF,UAAU,mCAAmC,kBAAgB,aAAa,iBAAe,oBAA/G,SACI,sBAAKA,UAAU,iBAAiBC,MAAOL,EAAvC,UACI,8EADJ,6WACua,mDADva,uDAKR,sBAAKI,UAAU,iBAAf,UACI,oBAAIA,UAAU,mBAAmBE,GAAG,aAApC,SACI,wBAAQF,UAAU,6BAA6BC,MAAOL,EAASO,KAAK,SAAS,iBAAe,WAAW,iBAAe,eAAe,gBAAc,QAAQ,gBAAc,cAAzK,iCAIJ,qBAAKD,GAAG,cAAcF,UAAU,8BAA8B,kBAAgB,aAAa,iBAAe,oBAA1G,SACI,sBAAKA,UAAU,iBAAiBC,MAAOL,EAAvC,UACI,+EADJ,8WACya,mDADza,uDAKR,sBAAKI,UAAU,iBAAf,UACI,oBAAIA,UAAU,mBAAmBE,GAAG,eAApC,SACI,wBAAQF,UAAU,6BAA6BC,MAAOL,EAASO,KAAK,SAAS,iBAAe,WAAW,iBAAe,iBAAiB,gBAAc,QAAQ,gBAAc,gBAA3K,iCAIJ,qBAAKD,GAAG,gBAAgBF,UAAU,8BAA8B,kBAAgB,eAAe,iBAAe,oBAA9G,SACI,sBAAKA,UAAU,iBAAiBC,MAAOL,EAAvC,UACI,8EADJ,8WACwa,mDADxa,0DAMZ,qBAAKI,UAAU,iBAAf,SACI,wBAAQG,KAAK,SAASC,QA5Dd,WACM,UAAlBR,EAAQF,OACRG,EAAW,CACPH,MAAO,QACPC,gBAAiB,QACjBU,OAAQ,oBAEZN,EAAW,uBAGXF,EAAW,CACPH,MAAO,QACPC,gBAAiB,UAErBI,EAAW,sBA8CqCC,UAAU,kBAAtD,SAAyEF,S,WClE1E,SAASQ,EAAOC,GAC3B,OAAQ,qBAAKP,UAAS,yCAAoCO,EAAMC,KAA1C,eAAqDD,EAAMC,MAAzE,SACJ,sBAAKR,UAAU,kBAAf,UACI,eAAC,IAAD,CAAMA,UAAU,eAAeS,GAAG,IAAlC,cACIF,EAAMG,SAEV,wBAAQV,UAAU,iBAAiBG,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAA5L,SACI,sBAAMH,UAAU,0BAEpB,sBAAKA,UAAU,2BAA2BE,GAAG,yBAA7C,UACI,qBAAIF,UAAU,kCAAd,UACI,oBAAIA,UAAU,WAAd,SACI,cAAC,IAAD,CAAMW,MAAI,EAACX,UAAU,kBAAkB,eAAa,OAAOS,GAAG,IAA9D,oBAEJ,oBAAIT,UAAU,WAAd,SACI,eAAC,IAAD,CAAMA,UAAU,WAAWS,GAAG,SAA9B,cACIF,EAAMK,kBAIlB,uBAAMZ,UAAU,SAAhB,UACI,uBAAOA,UAAU,oBAAoBG,KAAK,SAASU,YAAY,SAAS,aAAW,WACnF,wBAAQb,UAAU,0BAA0BG,KAAK,SAAjD,uBAEJ,sBAAKH,UAAS,2CAAmD,UAAbO,EAAMC,KAAgB,OAAQ,SAAlF,UACI,uBAAOR,UAAU,mBAAmBI,QAAUG,EAAMO,WAAYX,KAAK,WAAWY,KAAK,SAASb,GAAG,2BAC7F,uBAAOF,UAAU,mBAAmBgB,IAAI,yBAAxC,SAA+E,SAAbT,EAAMC,KAAe,oBAAsB,gCC7BtH,SAASS,EAASV,GAC7B,IA0BA,EAAuBd,mBAAS,uBAAhC,mBAAMyB,EAAN,KAAYC,EAAZ,KAEA,OACI,qCACA,sBAAKnB,UAAW,YAAYC,MAAO,CAACP,MAAoB,SAAda,EAAMC,KAAgB,QAAU,WAA1E,UACI,6BAAKD,EAAMa,UACX,qBAAKpB,UAAU,OAAf,SACI,0BAAUA,UAAU,eAAeqB,SAZzB,SAACC,GACnBC,QAAQC,IAAI,YACZL,EAAQG,EAAMG,OAAOC,QAUgDzB,MAAO,CAACN,gBAA8B,SAAbY,EAAMC,KAAe,OAAQ,QAASd,MAAoB,SAAda,EAAMC,KAAgB,QAAU,WAAYkB,MAAOR,EAAMhB,GAAG,QAAQyB,KAAK,QAE/M,wBAAQ3B,UAAU,uBAAuBI,QAnC5B,WACjBmB,QAAQC,IAAI,gCAAkCN,GAC9C,IAAIU,EAASV,EAAKW,cAClBV,EAAQS,GACRrB,EAAMuB,UAAU,yBAA0B,YA+BtC,kCACA,wBAAQ9B,UAAU,uBAAuBI,QA7B5B,WACjBmB,QAAQC,IAAI,gCAAkCN,GAC9C,IAAIU,EAASV,EAAKa,cAClBZ,EAAQS,GACRrB,EAAMuB,UAAU,yBAA0B,YAyBtC,kCACA,wBAAQ9B,UAAU,uBAAuBI,QAvBzB,WACpBmB,QAAQC,IAAI,iCAEZL,EADc,IAEdZ,EAAMuB,UAAU,gBAAiB,YAmB7B,2BAEJ,sBAAK9B,UAAW,iBAAiBC,MAAO,CAACP,MAAoB,SAAda,EAAMC,KAAgB,QAAU,WAA/E,UACI,wDAGA,8BACKU,EAAKc,MAAM,KAAKC,OADrB,cACwCf,EAAKe,OAD7C,iBAGA,6DAAgC,KAAQf,EAAKc,MAAM,KAAKC,OAAxD,eACA,0CACA,4BAAIf,EAAKe,OAAO,EAAEf,EAAM,oDCjDrB,SAASgB,EAAM3B,GAK1B,OAAQA,EAAM4B,OACV,8BACI,sBAAKnC,UAAS,sBAAiBO,EAAM4B,MAAMhC,KAA7B,gCAAiEY,KAAK,QAApF,UACI,iCAPM,SAACqB,GACf,IAAMC,EAAQD,EAAKL,cACnB,OAAOM,EAAMC,OAAO,GAAGT,cAAgBQ,EAAME,MAAM,GAAGR,cAKrCS,CAAWjC,EAAM4B,MAAMhC,QADpC,KACsDI,EAAM4B,MAAMM,IAC9D,wBAAQtC,KAAK,SAASuC,MAAM,YAAY,kBAAgB,QAAQ,aAAW,eFgC3FpC,EAAOqC,aAAe,CAClBjC,MAAO,aACPE,UAAW,mB,WGgBAgC,MAhDf,WACI,MAAwBnD,mBAAS,SAAjC,mBAAOe,EAAP,KAAaqC,EAAb,KACA,EAA0BpD,mBAAS,MAAnC,mBAAO0C,EAAP,KAAcW,EAAd,KACMhB,EAAW,SAACiB,EAAS5C,GACvB2C,EACG,CAAEL,IAAKM,EACP5C,KAAMA,IAGT6C,YAAW,WACPF,EAAS,QACV,OAiBP,OAAQ,mCACJ,eAAC,IAAD,WACA,cAACxC,EAAD,CAAQI,MAAM,YAAYE,UAAU,WAAWE,WAjBjC,WACD,SAATN,GACAqC,EAAQ,SACRI,SAASC,KAAKjD,MAAMN,gBAAkB,QACtCmC,EAAU,wBAAyB,WACnCmB,SAASvC,MAAQ,0BAGjBmC,EAAQ,QACRI,SAASC,KAAKjD,MAAMN,gBAAkB,UACtCmC,EAAU,uBAAwB,WAClCmB,SAASvC,MAAQ,0BAMmDF,KAAOA,IAC/E,cAAC0B,EAAD,CAAOC,MAAOA,IACd,qBAAKnC,UAAU,iBAAf,SACA,eAAC,IAAD,WAEE,cAAC,IAAD,CAAOmD,OAAK,EAACC,KAAK,SAAlB,SACE,cAAC5D,EAAD,MAEF,cAAC,IAAD,CAAO2D,OAAK,EAACC,KAAK,IAAlB,SACE,cAACnC,EAAD,CAAUG,QAAS,kCAAkCZ,KAAQA,EAAMsB,UAAYA,iBCxC5EuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFf,SAASgB,eAAe,SAM1BZ,M","file":"static/js/main.70e8a78c.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nexport default function About() {\r\n\r\n    const [myStyle, setMyStyle] = useState({\r\n        color: 'black',\r\n        backgroundColor: 'white'\r\n    })\r\n\r\n    const [btnText, setBtnText] = useState(\"Enable dark mode\")\r\n\r\n    const toggleStyle = ()=> {\r\n        if (myStyle.color === 'black') {\r\n            setMyStyle({\r\n                color: 'white',\r\n                backgroundColor: 'black',\r\n                border: '1px solid white'\r\n            })\r\n            setBtnText(\"Enable Light mode\")\r\n        }\r\n        else {\r\n            setMyStyle({\r\n                color: 'black',\r\n                backgroundColor: 'white'\r\n            })\r\n            setBtnText(\"Enable dark mode\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\" style={myStyle}>\r\n            <h1 className=\"my-3\"> About us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container my-3\">\r\n                <button type=\"button\" onClick={toggleStyle} className=\"btn btn-primary\">{btnText}</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (<nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n            <Link className=\"navbar-brand\" to=\"/\"> {\r\n                props.title\r\n            }</Link>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                    <li className=\"nav-item\">\r\n                        <Link Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"nav-link\" to=\"/about\"> {\r\n                            props.aboutText\r\n                        }</Link>\r\n                    </li>\r\n                </ul>\r\n                <form className=\"d-flex\">\r\n                    <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                    <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n                </form>\r\n                <div className={`form-check form-switch mx-3 text-${props.mode==='light'? 'dark': 'light'}`}>\r\n                    <input className=\"form-check-input\" onClick= {props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" for=\"flexSwitchCheckDefault\">{props.mode===\"dark\"? \"Enable light mode\" : \"Enable dark mode\"}</label>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </nav>)\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \"Title here\",\r\n    aboutText: \"About text here\"\r\n};\r\n","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick= ()=>{\r\n        console.log(\"Upper case button was clicked\" + text);\r\n        let newText= text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"converted to Uppercase\", \"success\")\r\n    }\r\n\r\n    const handleLoClick= ()=>{\r\n        console.log(\"Lower case button was clicked\" + text);\r\n        let newText= text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"converted to Lowercase\", \"success\")\r\n    }\r\n\r\n    const handleClearText = ()=>{\r\n        console.log(\"Clear Text button was clicked\");\r\n        let newText = \"\";\r\n        setText(newText)\r\n        props.showAlert(\"text  cleared\", \"success\")\r\n    }\r\n\r\n    const handleOnChange= (event)=>{\r\n        console.log(\"onChange\");\r\n        setText(event.target.value);\r\n    }\r\n    \r\n    const[text, setText] = useState('Enter the text here');\r\n\r\n    return (\r\n        <>\r\n        <div className= \"container\" style={{color:props.mode=== \"dark\"? \"white\" : \"#042743\"}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" onChange={handleOnChange} style={{backgroundColor: props.mode===\"dark\"? \"grey\": \"white\", color:props.mode=== \"dark\"? \"white\" : \"#042743\"}} value={text} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleClearText}>Clear Text</button>\r\n        </div>\r\n        <div className= \"container my-3\" style={{color:props.mode=== \"dark\"? \"white\" : \"#042743\"}}>\r\n            <h1>\r\n                Your Text summary here\r\n            </h1>\r\n            <p>\r\n                {text.split(\" \").length} words and {text.length} characters\r\n            </p>\r\n            <p>Estimated time to read is : {0.008 * text.split(\" \").length} minutes </p>\r\n            <h2> Preview</h2>\r\n            <p>{text.length>0?text: \"Enter something in the textbox to preview\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize= (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1).toLowerCase();\r\n    }\r\n    return (props.alert &&\r\n        <div>\r\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n                <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport React, {useState} from 'react'\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n  } from \"react-router-dom\";\n\nfunction App() {\n    const [mode, setMode] = useState(\"light\")\n    const [alert, setAlert] = useState(null)\n    const showAlert =(message, type)=>{\n        setAlert(\n           { msg: message,\n           type: type}\n        )\n\n        setTimeout(() => {\n            setAlert(null)\n        }, 1500);\n    }\n    const toggleMode= ()=> {\n        if (mode === \"dark\"){\n            setMode(\"light\")\n            document.body.style.backgroundColor = 'white'\n            showAlert(\"Light mode is enabled\", \"success\");\n            document.title = \"TextUtils- Light Mode\"\n        }\n        else{\n            setMode(\"dark\")\n            document.body.style.backgroundColor = '#042743'\n            showAlert(\"Dark mode is enabled\", \"success\");\n            document.title = \"TextUtils- Light Mode\"\n        }\n    }\n    \n    return (<>\n        <Router>\n        <Navbar title=\"TextUtils\" aboutText=\"About Us\" toggleMode= {toggleMode} mode= {mode}/>\n        <Alert alert={alert}/>\n        <div className=\"container my-3\">\n        <Switch>\n          {/* use exact to match the url exactly otherwise it will match partailly */}\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\">\n            <TextForm heading =\"Enter the text to analyse below\" mode = {mode} showAlert= {showAlert}/>\n          </Route>\n        </Switch>\n        </div>\n        </Router>\n        \n    </>);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}